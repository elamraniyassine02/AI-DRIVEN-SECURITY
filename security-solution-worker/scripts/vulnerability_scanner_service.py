import argparse
import json
import logging
import os
import time

from elasticsearch import Elasticsearch
from elasticsearch.helpers import bulk
import nmap

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def connect_to_elasticsearch(config):
    es = Elasticsearch(hosts=config['elasticsearch']['hosts'])
    logger.info(f"Connected to Elasticsearch at {config['elasticsearch']['hosts']}")
    return es

def scan_vulnerabilities(config):
    nm = nmap.PortScanner()
    
    for target in config['vulnerability_scanning']['targets']:
        nm.scan(hosts=target['host'], arguments='-sV')
        
        for host in nm.all_hosts():
            if 'tcp' in nm[host]:
                for port in nm[host]['tcp']:
                    service = nm[host]['tcp'][port]
                    vulnerability = {
                        'host': host,
                        'port': port,
                        'service': service['name'],
                        'product': service['product'],
                        'version': service['version']
                    }
                    yield vulnerability

def index_vulnerabilities(es, vulnerabilities, index_name):
    actions = [
        {
            "_index": index_name,
            "_source": vulnerability
        }
        for vulnerability in vulnerabilities
    ]
    
    bulk(es, actions)
    logger.info(f"Indexed {len(actions)} vulnerabilities into {index_name}")

def run_vulnerability_scanner(config):
    es = connect_to_elasticsearch(config['elk'])
    
    while True:
        vulnerabilities = scan_vulnerabilities(config)
        index_vulnerabilities(es, vulnerabilities, config['elk']['elasticsearch']['vulnerabilities_index'])
        
        logger.info(f"Vulnerability scanning completed. Sleeping for {config['vulnerability_scanning']['interval']} seconds...")
        time.sleep(config['vulnerability_scanning']['interval'])

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--config', type=str, default='config/worker_config.json', help='Path to the configuration file')
    args = parser.parse_args()

    with open(args.config) as f:  
        config = json.load(f)

    run_vulnerability_scanner(config)