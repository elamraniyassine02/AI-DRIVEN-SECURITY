
#!/usr/bin/env python3
"""
Vulnerability Scanner Service for AI-Driven Security Solution

This service performs automated vulnerability scanning on specified targets
and sends results to both Elasticsearch and the central server via message queue.
"""
import argparse
import json
import logging
import os
import sys
import time
from datetime import datetime

import nmap
from elasticsearch import Elasticsearch
from elasticsearch.helpers import bulk

#######################
# LOGGING CONFIGURATION
#######################
# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("logs/vulnerability_scanner.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Import message_queue client
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
try:
    from message_queue import MessageClient
except ImportError:
    logger.error("Failed to import MessageClient, make sure message_queue.py is in the same directory")
    sys.exit(1)

#######################
# ELASTICSEARCH FUNCTIONS
#######################
def connect_to_elasticsearch(config):
    """Connect to Elasticsearch.
    
    Args:
        config: Configuration dictionary containing ELK settings
        
    Returns:
        Elasticsearch client object or None if connection fails
    """
    if 'elk' not in config:
        logger.warning("ELK configuration not found")
        return None
        
    hosts = config['elk']['elasticsearch']['hosts']
    logger.info(f"Connecting to Elasticsearch at {hosts}")
    
    try:
        es = Elasticsearch(hosts=hosts)
        logger.info("Connected to Elasticsearch successfully")
        return es
    except Exception as e:
        logger.error(f"Error connecting to Elasticsearch: {e}")
        return None

def index_vulnerabilities(es, vulnerabilities, index_name):
    """Index vulnerabilities to Elasticsearch.
    
    Args:
        es: Elasticsearch client
        vulnerabilities: List of vulnerability dictionaries
        index_name: Name of the Elasticsearch index
    """
    if not vulnerabilities:
        logger.info("No vulnerabilities to index")
        return
        
    logger.info(f"Indexing {len(vulnerabilities)} vulnerabilities to {index_name}")
    
    try:
        # Prepare bulk actions
        actions = []
        for vuln in vulnerabilities:
            actions.append({
                "_index": index_name,
                "_source": vuln
            })
            
        # Use bulk API
        success, errors = bulk(es, actions, refresh=True)
        
        logger.info(f"Successfully indexed {success} vulnerabilities, errors: {errors}")
        
    except Exception as e:
        logger.error(f"Error indexing vulnerabilities to Elasticsearch: {e}")

#######################
# SCANNING FUNCTIONS
#######################
def scan_vulnerabilities(config):
    """Scan targets for vulnerabilities.
    
    Args:
        config: Configuration dictionary containing scan targets
        
    Returns:
        List of vulnerability dictionaries
    """
    logger.info("Starting vulnerability scan")
    
    nm = nmap.PortScanner()
    vulnerabilities = []
    scan_timestamp = datetime.now().isoformat()
    
    for target in config['vulnerability_scanning']['targets']:
        host = target['host']
        ports = target.get('ports', '1-1024')
        
        logger.info(f"Scanning host {host} (ports {ports})")
        
        try:
            # Run a service detection scan with version detection
            nm.scan(hosts=host, arguments=f'-sV -p {ports}')
            
            for scanned_host in nm.all_hosts():
                host_name = nm[scanned_host].hostname() or scanned_host
                
                for proto in nm[scanned_host].all_protocols():
                    lport = list(nm[scanned_host][proto].keys())
                    
                    for port in lport:
                        service = nm[scanned_host][proto][port]
                        
                        # Calculate vulnerability score based on service information
                        vuln_score = 0.0
                        severity = "info"
                        
                        # Detect if service has version info (potential vulnerability)
                        if service['version']:
                            vuln_score += 0.3
                            severity = "low"
                        
                        # Detect if service is typically dangerous when exposed
                        risky_services = ['ftp', 'telnet', 'rsh', 'rlogin', 'rexec', 'tftp']
                        if service['name'] in risky_services:
                            vuln_score += 0.4
                            severity = "medium"
                        
                        # Detect if running as root (port < 1024)
                        if int(port) < 1024:
                            vuln_score += 0.1
                        
                        # Create vulnerability record
                        vulnerability = {
                            '@timestamp': scan_timestamp,
                            'host': host_name,
                            'ip': scanned_host,
                            'port': port,
                            'protocol': proto,
                            'service': service['name'],
                            'product': service['product'],
                            'version': service['version'],
                            'severity': severity,
                            'vulnerability_score': vuln_score,
                            'description': f"Open port {port}/{proto} running {service['name']} {service['product']} {service['version']}",
                            'source': "AI-Driven Security Solution"
                        }
                        
                        vulnerabilities.append(vulnerability)
                        
                logger.info(f"Found {len(vulnerabilities)} potential vulnerabilities on {host_name}")
                        
        except Exception as e:
            logger.error(f"Error scanning host {host}: {e}")
            
    return vulnerabilities

#######################
# DATA HANDLING FUNCTIONS
#######################
def save_vulnerabilities_to_file(vulnerabilities, directory="data"):
    """Save vulnerabilities to a local file.
    
    Args:
        vulnerabilities: List of vulnerability dictionaries
        directory: Directory to save the file
    """
    if not vulnerabilities:
        return
        
    logger.info(f"Saving {len(vulnerabilities)} vulnerabilities to local file")
    
    os.makedirs(directory, exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = os.path.join(directory, f"vulnerabilities_{timestamp}.json")
    
    try:
        with open(filename, 'w') as f:
            json.dump(vulnerabilities, f, indent=2)
        logger.info(f"Vulnerabilities saved to {filename}")
    except Exception as e:
        logger.error(f"Error saving vulnerabilities to file: {e}")

def send_vulnerabilities_to_server(client, vulnerabilities):
    """Send vulnerabilities to the server via message queue.
    
    Args:
        client: MessageClient object
        vulnerabilities: List of vulnerability dictionaries
    """
    if not vulnerabilities:
        logger.info("No vulnerabilities to send")
        return
        
    logger.info(f"Sending {len(vulnerabilities)} vulnerabilities to server")
    
    try:
        response = client.send_data({
            'type': 'vulnerabilities',
            'vulnerabilities': vulnerabilities,
            'timestamp': datetime.now().isoformat()
        })
        
        if response.get('status') == 'success':
            logger.info("Vulnerabilities sent successfully")
        else:
            logger.error(f"Failed to send vulnerabilities: {response.get('message')}")
            
    except Exception as e:
        logger.error(f"Error sending vulnerabilities to server: {e}")

#######################
# MAIN SERVICE FUNCTION
#######################
def run_vulnerability_scanner_service(config_path):
    """Run the vulnerability scanner service.
    
    Args:
        config_path: Path to the configuration file
    """
    os.makedirs("logs", exist_ok=True)
    
    try:
        # Load configuration
        with open(config_path) as f:
            config = json.load(f)
            
        # Connect to message queue
        client = MessageClient(
            config['server']['host'],
            config['server']['port'],
            config['worker_id'],
            config['worker_type']
        )
        
        connected = client.connect()
        if not connected:
            logger.error("Failed to connect to message queue, continuing in standalone mode")
            
        # Start heartbeat thread if connected
        if connected:
            client.start_heartbeat_thread()
            
        # Connect to Elasticsearch
        es = connect_to_elasticsearch(config)
            
        logger.info("Vulnerability scanner service started")
        
        # Check if we should run once (for testing)
        run_once = '--scan-now' in sys.argv
        
        # Main scanning loop
        while True:
            try:
                # Scan for vulnerabilities
                vulnerabilities = scan_vulnerabilities(config)
                
                # Save locally
                save_vulnerabilities_to_file(vulnerabilities)
                
                # Send to server if connected
                if connected:
                    send_vulnerabilities_to_server(client, vulnerabilities)
                    
                # Index to Elasticsearch if connected
                if es is not None:
                    index_vulnerabilities(
                        es,
                        vulnerabilities,
                        config['elk']['elasticsearch']['vulnerabilities_index']
                    )
                    
                # Exit if running once
                if run_once:
                    logger.info("Scan completed, exiting (--scan-now was specified)")
                    break
                    
            except Exception as e:
                logger.error(f"Error in vulnerability scanning cycle: {e}")
                
            # Sleep until next scan cycle
            interval = config['vulnerability_scanning'].get('interval', 3600)
            logger.info(f"Vulnerability scanning cycle completed, sleeping for {interval} seconds")
            time.sleep(interval)
            
    except KeyboardInterrupt:
        logger.info("Vulnerability scanner service shutting down")
        if 'client' in locals() and connected:
            client.disconnect()
    except Exception as e:
        logger.error(f"Error in vulnerability scanner service: {e}")
        if 'client' in locals() and connected:
            client.disconnect()
        raise

#######################
# ENTRY POINT
#######################
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Vulnerability Scanner Service")
    parser.add_argument("--config", type=str, default="config/worker_config.json",
                      help="Path to the configuration file")
    parser.add_argument("--scan-now", action="store_true",
                      help="Run a scan immediately and exit")
    
    args = parser.parse_args()
    run_vulnerability_scanner_service(args.config)